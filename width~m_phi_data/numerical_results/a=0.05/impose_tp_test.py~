import numpy as np
import matplotlib.pyplot as plt
import math

def V(x):
    a = 0.05
    return a * x * x

def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s-1] - t_array[s+1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i])/2 + (sp[i]*sp[i]*(i*math.pi/128)*(i*math.pi/128))/2 + V(sp[i])
    return E

fig_size = plt.rcParams["figure.figsize"]
fig_size[0] = 15
fig_size[1] = 9
num_plots = 4

colormap = plt.cm.gist_rainbow
plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])


def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s-1] - t_array[s+1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i])/2 + (sp[i]*sp[i]*(i*math.pi/128)*(i*math.pi/128))/2 + V(sp[i])
    return E

fig_size = plt.rcParams["figure.figsize"]
fig_size[0] = 15
fig_size[1] = 9
num_plots = 4

colormap = plt.cm.gist_rainbow
plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])

sol_dir = 't_p=181/t*=10/G/build/fs_sol_1d'
t_array = np.fromfile('%s/t.dat' % sol_dir, dtype='f8')

time_steps = len(t_array)
x_array = np.fromfile('%s/x.dat' % sol_dir, dtype='f8')
nx = len(x_array)
sol = np.fromfile('%s/sol.dat' % sol_dir, dtype='f8').reshape((112, nx))
f_l = energy(67)
NX = len(f_l)
F_l = np.zeros(NX)
for k in range(0,NX):
 F_l[k] = k * f_l[k]
plt.plot(F_l[0:NX])

data1 = np.genfromtxt("a=0.05_ts=14_tp=181.txt", skip_header=3)
line = plt.plot(data1[:,0], 2 * data1[:,1])
#plt.setp(line, linestyle='--')
plt.setp(line, linewidth=2)

def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s-1] - t_array[s+1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i])/2 + (sp[i]*sp[i]*(i*math.pi/256)*(i*math.pi/256))/2 + V(sp[i])
    return E

sol_dir = 't_p=362/t*=10/G/build/fs_sol_1d'
t_array = np.fromfile('%s/t.dat' % sol_dir, dtype='f8')

time_steps = len(t_array)
x_array = np.fromfile('%s/x.dat' % sol_dir, dtype='f8')
nx = len(x_array)
sol = np.fromfile('%s/sol.dat' % sol_dir, dtype='f8').reshape((121, nx))
f_l = energy(73)
NX = len(f_l)
F_l = np.zeros(NX)
for k in range(0,NX):
 F_l[k] = k * f_l[k]
plt.plot(F_l[0:NX])

data2 = np.genfromtxt("a=0.05_ts=14_tp=362.txt", skip_header=3)
line = plt.plot(data2[:,0], 2 * data2[:,1])
#plt.setp(line, linestyle='--')
plt.setp(line, linewidth=2)


plt.legend([r'Gaussian($m_{\phi}t_{p}=181$, $m_{\phi}t=130$)', r'Analytic($m_{\phi}t_{p}=181$, $t=\sqrt{t_{*}^{2}+x_{p}^{2}}$)', r'Gaussian($m_{\phi}t_{p}=362$, $m_{\phi}t=260$)', r'Analytic($m_{\phi}t_{p}=362$, $t=\sqrt{t_{*}^{2}+x_{p}^{2}}$)'], loc='upper right')
plt.rcParams["figure.figsize"] = fig_size
plt.xscale('log')
plt.axhline(0,color='black',linewidth=0.6)
plt.axis([1,10000,0,0.28])
plt.title(r'Gaussian, $\alpha_{\phi}=0.05$, $m_{\phi}t_{*}=14.14$', fontsize=17, fontweight='bold')
plt.ylabel(r'$(m_{\phi}x_p/{\pi})k\cdot\epsilon (k)$', fontsize=14)
plt.xlabel(r'$(m_{\phi}x_p/{\pi})k$', fontsize=14)
plt.savefig('Gaussian_a=0.05_t*=14.14_logscale_2.png')
plt.close()

def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s-1] - t_array[s+1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i])/2 + (sp[i]*sp[i]*(i*math.pi/128)*(i*math.pi/128))/2 + V(sp[i])
    return E

fig_size = plt.rcParams["figure.figsize"]
fig_size[0] = 15
fig_size[1] = 9
num_plots = 4

colormap = plt.cm.gist_rainbow
plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])

sol_dir = 't_p=181/t*=12/G/build/fs_sol_1d'
t_array = np.fromfile('%s/t.dat' % sol_dir, dtype='f8')

time_steps = len(t_array)
x_array = np.fromfile('%s/x.dat' % sol_dir, dtype='f8')
nx = len(x_array)
sol = np.fromfile('%s/sol.dat' % sol_dir, dtype='f8').reshape((112, nx))
f_l = energy(67)
NX = len(f_l)
F_l = np.zeros(NX)
for k in range(0,NX):
 F_l[k] = k * f_l[k]
plt.plot(F_l[0:NX])

data1 = np.genfromtxt("a=0.05_ts=17_tp=181.txt", skip_header=3)
line = plt.plot(data1[:,0], 2 * data1[:,1])
#plt.setp(line, linestyle='--')
plt.setp(line, linewidth=2)

def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s-1] - t_array[s+1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i])/2 + (sp[i]*sp[i]*(i*math.pi/256)*(i*math.pi/256))/2 + V(sp[i])
    return E

sol_dir = 't_p=362/t*=12/G/build/fs_sol_1d'
t_array = np.fromfile('%s/t.dat' % sol_dir, dtype='f8')

time_steps = len(t_array)
x_array = np.fromfile('%s/x.dat' % sol_dir, dtype='f8')
nx = len(x_array)
sol = np.fromfile('%s/sol.dat' % sol_dir, dtype='f8').reshape((121, nx))
f_l = energy(73)
NX = len(f_l)
F_l = np.zeros(NX)
for k in range(0,NX):
 F_l[k] = k * f_l[k]
plt.plot(F_l[0:NX])

data2 = np.genfromtxt("a=0.05_ts=17_tp=362.txt", skip_header=3)
line = plt.plot(data2[:,0], 2 * data2[:,1])
#plt.setp(line, linestyle='--')
plt.setp(line, linewidth=2)


plt.legend([r'Gaussian($m_{\phi}t_{p}=181$, $m_{\phi}t=130$)', r'Analytic($m_{\phi}t_{p}=181$, $t=\sqrt{t_{*}^{2}+x_{p}^{2}}$)', r'Gaussian($m_{\phi}t_{p}=362$, $m_{\phi}t=260$)', r'Analytic($m_{\phi}t_{p}=362$, $t=\sqrt{t_{*}^{2}+x_{p}^{2}}$)'], loc='upper right')
plt.rcParams["figure.figsize"] = fig_size
plt.xscale('log')
plt.axhline(0,color='black',linewidth=0.6)
plt.axis([1,10000,0,0.28])
plt.title(r'Gaussian, $\alpha_{\phi}=0.05$, $m_{\phi}t_{*}=16.97$', fontsize=17, fontweight='bold')
plt.ylabel(r'$(m_{\phi}x_p/{\pi})k\cdot\epsilon (k)$', fontsize=14)
plt.xlabel(r'$(m_{\phi}x_p/{\pi})k$', fontsize=14)
plt.savefig('Gaussian_a=0.05_t*=16.97_logscale_2.png')
plt.close()


def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s-1] - t_array[s+1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i])/2 + (sp[i]*sp[i]*(i*math.pi/128)*(i*math.pi/128))/2 + V(sp[i])
    return E

fig_size = plt.rcParams["figure.figsize"]
fig_size[0] = 15
fig_size[1] = 9
num_plots = 4

colormap = plt.cm.gist_rainbow
plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])

sol_dir = 't_p=181/t*=14/G/build/fs_sol_1d'
t_array = np.fromfile('%s/t.dat' % sol_dir, dtype='f8')

time_steps = len(t_array)
x_array = np.fromfile('%s/x.dat' % sol_dir, dtype='f8')
nx = len(x_array)
sol = np.fromfile('%s/sol.dat' % sol_dir, dtype='f8').reshape((112, nx))
f_l = energy(67)
NX = len(f_l)
F_l = np.zeros(NX)
for k in range(0,NX):
 F_l[k] = k * f_l[k]
plt.plot(F_l[0:NX])

data1 = np.genfromtxt("a=0.05_ts=20_tp=181.txt", skip_header=3)
line = plt.plot(data1[:,0], 2 * data1[:,1])
#plt.setp(line, linestyle='--')
plt.setp(line, linewidth=2)

def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s-1] - t_array[s+1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i])/2 + (sp[i]*sp[i]*(i*math.pi/256)*(i*math.pi/256))/2 + V(sp[i])
    return E

sol_dir = 't_p=362/t*=14/G/build/fs_sol_1d'
t_array = np.fromfile('%s/t.dat' % sol_dir, dtype='f8')

time_steps = len(t_array)
x_array = np.fromfile('%s/x.dat' % sol_dir, dtype='f8')
nx = len(x_array)
sol = np.fromfile('%s/sol.dat' % sol_dir, dtype='f8').reshape((121, nx))
f_l = energy(73)
NX = len(f_l)
F_l = np.zeros(NX)
for k in range(0,NX):
 F_l[k] = k * f_l[k]
plt.plot(F_l[0:NX])

data2 = np.genfromtxt("a=0.05_ts=20_tp=362.txt", skip_header=3)
line = plt.plot(data2[:,0], 2 * data2[:,1])
#plt.setp(line, linestyle='--')
plt.setp(line, linewidth=2)


plt.legend([r'Gaussian($m_{\phi}t_{p}=181$, $m_{\phi}t=130$)', r'Analytic($m_{\phi}t_{p}=181$, $t=\sqrt{t_{*}^{2}+x_{p}^{2}}$)', r'Gaussian($m_{\phi}t_{p}=362$, $m_{\phi}t=260$)', r'Analytic($m_{\phi}t_{p}=362$, $t=\sqrt{t_{*}^{2}+x_{p}^{2}}$)'], loc='upper right')
plt.rcParams["figure.figsize"] = fig_size
plt.xscale('log')
plt.axhline(0,color='black',linewidth=0.6)
plt.axis([1,10000,0,0.28])
plt.title(r'Gaussian, $\alpha_{\phi}=0.05$, $m_{\phi}t_{*}=19.79$', fontsize=17, fontweight='bold')
plt.ylabel(r'$(m_{\phi}x_p/{\pi})k\cdot\epsilon (k)$', fontsize=14)
plt.xlabel(r'$(m_{\phi}x_p/{\pi})k$', fontsize=14)
plt.savefig('Gaussian_a=0.05_t*=19.79_logscale_2.png')
plt.close()
