import numpy as np
import matplotlib.pyplot as plt
import math


sol_dir = 'fs_sol_1d'
t_array = np.fromfile('%s/t.dat' % sol_dir, dtype='f8')
time_steps = len(t_array)
x_array = np.fromfile('%s/x.dat' % sol_dir, dtype='f8')
nx = len(x_array)

sol = np.fromfile('%s/sol.dat' % sol_dir, dtype='f8').reshape((112, nx))

def V(x):
    a = 0.1
    return a * x * x

def energy(s):
    def spectrum(s):
        phi = sol[s,:]
        N = len(phi)
        return 2.0 / N * np.real(np.fft.rfft(phi))
    delta_t = t_array[s+1] - t_array[s-1]
    sp = spectrum(s)
    spb = spectrum(s-1)
    spa = spectrum(s+1)
    L = len(sp)
    def spectrum_dot(s):
        sD = np.zeros(L)
        for j in range(0,L):
         sD[j] = (spa[j] - spb[j]) / delta_t
        return sD
    sd = spectrum_dot(s)
    E = np.zeros(L)
    for i in range(0,L):
     E[i] = (sd[i]*sd[i]/2) + (sp[i]*sp[i]*(i*math.pi/128)*(i*math.pi/128)/2) + V(sp[i])/2
    return E


#for i in range(0,19):
 #   t = 20 + (10 * i)
  #  f_l = energy(1 + (6 * i))
   # NX = len(f_l)
    #data = np.zeros((NX, 2))
#    for k in range(0,NX):
 #    data[k][0] = k
  #  for j in range(0,NX):
   #  data[j][1] = f_l[j]
    #np.savetxt("energy_spectrum_t=" + str(t) + ".txt", data)

#for i in range(0,4):
 #   t = 115 + (10 * i)
  #  f_l = energy(58 + (6 * i))
   # NX = len(f_l)
    #data = np.zeros((NX, 2))
#    for k in range(0,NX):
 #    data[k][0] = k
  #  for j in range(0,NX):
   #  data[j][1] = f_l[j]
    #np.savetxt("energy_spectrum_t=" + str(t) + ".txt", data)

fig_size = plt.rcParams["figure.figsize"]
fig_size[0] = 15
fig_size[1] = 9
num_plots = 14

colormap = plt.cm.gist_rainbow
plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])

for i in range(0,num_plots):
    f_l = energy(1 + (6 * i))
    NX = len(f_l)
    F_l = np.zeros(NX)
    for k in range(0,NX):
     F_l[k] = k * f_l[k]
    plt.plot(F_l[0:NX])

plt.rcParams["figure.figsize"] = fig_size
plt.axhline(0,color='black',linewidth=0.6)
plt.axis([1,5000,0,0.28])
plt.title(r'Asymmetric Gaussian, $\alpha_{\phi}=0.1$, $m_{\phi}t_{p}=128$, $m_{\phi}t_{*}=10.00$', fontsize=14.1, fontweight='bold')
plt.ylabel(r'$(m_{\phi}x_p/{\pi})k\cdot\epsilon (k)$', fontsize=14)
plt.xlabel(r'$(m_{\phi}x_p/{\pi})k$', fontsize=14)
plt.legend(['t=20', 't=30', 't=40', 't=50', 't=60', 't=70', 't=80', 't=90', 't=100', 't=110', 't=120', 't=130', 't=140', 't=150'], loc='upper right')
plt.xscale('log')
plt.savefig('Asymmetric_Gaussian_20-150_logscale_2.png')

plt.close()


num_plots = 9

colormap = plt.cm.gist_rainbow
plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])

for i in range(0,num_plots):
    f_l = energy(61 + (6 * i))
    NX = len(f_l)
    F_l = np.zeros(NX)
    for k in range(0,NX):
     F_l[k] = k * f_l[k]
    plt.plot(F_l[0:NX])

plt.rcParams["figure.figsize"] = fig_size
plt.axhline(0,color='black',linewidth=0.6)
plt.axis([1,5000,0,0.28])
plt.title(r'Asymmetric Gaussian, $\alpha_{\phi}=0.1$, $m_{\phi}t_{p}=128$, $m_{\phi}t_{*}=10.00$', fontsize=14.1, fontweight='bold')
plt.ylabel(r'$(m_{\phi}x_p/{\pi})k\cdot\epsilon (k)$', fontsize=14)
plt.xlabel(r'$(m_{\phi}x_p/{\pi})k$', fontsize=14)
plt.xscale('log')
plt.legend(['t=120', 't=130', 't=140', 't=150', 't=160', 't=170', 't=180', 't=190', 't=200'], loc='upper right')
plt.savefig('Asymmetric_Gaussian_120-200_logscale_2.png')

plt.close()


num_plots = 5

colormap = plt.cm.gist_rainbow
plt.gca().set_color_cycle([colormap(i) for i in np.linspace(0, 0.9, num_plots)])

for i in range(0,num_plots):
    f_l = energy(61 + (12 * i))
    NX = len(f_l)
    F_l = np.zeros(NX)
    for k in range(0,NX):
     F_l[k] = k * f_l[k]
    plt.plot(F_l[0:NX])

plt.rcParams["figure.figsize"] = fig_size
plt.axhline(0,color='black',linewidth=0.6)
plt.axis([1,5000,0,0.28])
plt.title(r'Asymmetric Gaussian, $\alpha_{\phi}=0.1$, $m_{\phi}t_{p}=128$, $m_{\phi}t_{*}=10.00$', fontsize=14.1, fontweight='bold')
plt.ylabel(r'$(m_{\phi}x_p/{\pi})k\cdot\epsilon (k)$', fontsize=14)
plt.xlabel(r'$(m_{\phi}x_p/{\pi})k$', fontsize=14)
plt.xscale('log')
plt.legend(['t=120', 't=140', 't=160', 't=180', 't=200'], loc='upper right')
plt.savefig('Asymmetric_Gaussian_120-200_1_logscale_2.png')

plt.close()


